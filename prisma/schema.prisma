// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  name      String    @db.VarChar(100)
  code      String?   @unique @db.VarChar(50)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  users  ProjectsOnUsers[]
  meters Meter[]
}

enum Role {
  ENG // Engineer         (工程師)
  ENM // Engineer Manager (工程師主管)
  OFW // Office Worker    (文書)
  ADM // Admin            (管理者)
}

model User {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String    @unique @db.VarChar(50)
  password    String    @db.VarChar(255)
  fullname    String?   @db.VarChar(20)
  title       Role
  email       String?   @unique @db.VarChar(100)
  phone       String?   @db.VarChar(20)
  avatar      String?   @db.VarChar(100)
  isActive    Boolean   @default(true)
  isDailyLink Boolean   @default(true)
  lineID      String?   @unique @db.VarChar(40)
  note        String?   @db.Text
  token       String?   @db.VarChar(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  projects ProjectsOnUsers[]
  Record   Record[]
}

model ProjectsOnUsers {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @db.UnsignedInt
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int       @db.UnsignedInt
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, projectId])
}

model Meter {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @db.UnsignedInt
  area      String? @db.VarChar(30)
  waterId   String  @unique @db.VarChar(20)
  meterId   String  @unique @db.VarChar(30)
  address   String? @db.VarChar(100)
  lat       Float?  @db.Double
  lng       Float?  @db.Double
  note      String? @db.Text
  type      Int?    @db.TinyInt // 0~2 直接錶0、總錶1、分錶2
  location  String? @db.VarChar(20)
  suppy     Int?    @db.TinyInt // 1~5 正常1、中止3、停水5
  isActive  Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Record    Record[]
}

enum Status {
  success
  notRecord
}

model Record {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @db.UnsignedInt
  meter     Meter     @relation(fields: [meterId], references: [id], onDelete: Cascade)
  meterId   Int       @db.UnsignedInt
  status    Status
  content   String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
